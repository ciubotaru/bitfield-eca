bitfield-eca
============

Version 0.0.1 (January 7, 2017)

eca is a collection of algorithms that implement Elementary Cellular Automata.

Algorithms
----------

Elementary Cellular Automaton is a one-dimensional two-state CA, where the state 
of a cell in the next generation depends only on the current state of the cell 
and its two immediate neighbors. The state of each cell is represented by one bit in a bit array. The rule of transformation is represented by "Wolfram code".

An important convention is that bits are numbered and showed from right to left. This means that bit 0 is the rightmost.

Example: Rule 30

|       current state       | 111 | 110 | 101 | 100 | 011 | 010 | 001 | 000 |
+---------------------------+-----+-----+-----+-----+-----+-----+-----+-----+
| new state for center cell |  0  |  0  |  0  |  1  |  1  |  1  |  1  |  0  |

center' = left XOR [ center OR right ]

The boolean formulae are taken from:
  * Stephen Wolfram, A New Kind of Science, p. 884
  * Evangelos Georgiadis, A Note on Minimal Boolean Formula Size of 
One-Dimensional Cellular Automata, Journal of Cellular Automata. 2007, Vol. 2 Issue 4, p. 353

Installation
------------

To compile bitfield from source code:

    $ autoconf
    $ ./configure --prefix=DIRECTORY
    $ make

The only compile-time and run-time dependency is Vitalie Ciubotaru's 'bitfield' 
library (version 0.4.*). If bitfield is not installed, or if the sources were 
configured with the '--with-local-bitfield' flag, make will assume that the 
source code of bitfield is available in the source tree (in 'bitfield' 
directory) and will attempt to build it first.

`make` builds a shared and a static library. For a shared or a static library only, do `make shared` or `make static`.
`make check` runs some tests agains the newly-built library.
`make examples` runs some examples with graphical output.

Functions
---------
For function syntax, see "eca.h". For details on every function, see
its manual page.

eca_string() transforms an array of bits by a corresponding Wolfram's rule.

eca_string_ip() transforms an array of bits "in-place".

eca_ring() treats the input array of bits as a ring and transforms it
by a corresponding Wolfram's rule.

eca_ring_ip() treats the input array of bits as a ring and transforms
it "in-place".

Please, see "examples" directory for working examples.

Licensing
---------

bitfield-eca is free software, and is released under the terms of the GNU General 
Public License version 3 or any later version. Please see the file called 
LICENSE.
